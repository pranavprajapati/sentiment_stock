{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage of positive tweets : 29.41176470588235 %\n",
      "Percentage of negative tweets : 70.58823529411765 %\n",
      "\n",
      "\n",
      "Positive tweets:\n",
      "RT @rahulpandita: After travelling through Bihar for ten days, I can say one thing with absolute conviction: Pulwama has significantly chan…\n",
      "RT @arvind_barmer: Just watched first episode of @ErosNow series on Narendra Modi Story. It is made so beautifully and truly that you reall…\n",
      "RT @Tejasvi_Surya: The sign of a true leader is seen in how many people he grooms and inspires. And PM Shri Narendra Modi is a supreme one…\n",
      "RT @Ethirajans: Bishop Ezra Sargunam!\n",
      "\n",
      "Absolutely baseless and slanderous charges against PM Narendra Modi.\n",
      "\n",
      "Says, Modi not only helps defa…\n",
      "RT @Seems3r: Is it picture ka Darr or Chowkidar ki Laathi ka Darr ??\n",
      "\n",
      "Awesome @vivekoberoi !!!!!\n",
      "\n",
      "I can definitely say that PM Narendra Mod…\n",
      "RT @zoo_bear: After campaigning for Arun Jaitley in Amritsar, Our Reel PM Narendra Modi forgot to cast his vote this day. As he was busy at…\n",
      "Poll violations Abound: Doordarshan Again in Murky Waters as It Telecasts Modi’s Kolkata Rally Live\n",
      "\n",
      "CPI(M) leader… https://t.co/90Z9Dwrrgr\n",
      "RT @TSM979: What more passionate but succinct endorsement than this https://t.co/GElWJ7ZjBd by @dharmadispatch ?\n",
      "If at all anything -read a…\n",
      "Congress-JD(S) 17, BJP 11 in Karnataka, says  survey.  BJP tally could fall by 6 from 2014. UPA sweeping Old Mysore… https://t.co/a3WVKgs4J0\n",
      "RT @t_d_h_nair: We have wasted a lot of time on Pakistan. Let them die on their own; let’s move ahead - Narendra Modi\n",
      "\n",
      "The same Modi is how…\n",
      "\n",
      "\n",
      "Negative tweets:\n",
      "RT @paranjoygt: Empty Chairs Scare BJP: Party Hires Four Trains at Rs 53 Lakh to Bring People For Modi’s Kolkata Rally https://t.co/e7AzIhl…\n",
      "RT @filmy_foodie: On the one hand, you have 100+ filmmakers anti-Modi.\n",
      "On the other, just one Rajnikanth is enough!!!\n",
      "😊😊😊😊😊\n",
      "\n",
      "https://t.co/E…\n",
      "RT @ashoswai: When a party has one lakh crore rupees election war chest, why it took a 3rd-grade hero like Vivek Oberoi, why didn't they ta…\n",
      "RT @_sabanaqvi: My piece.... https://t.co/gN1FiAV95O\n",
      "RT @GauravPandhi: Keywords from speeches:\n",
      "\n",
      "Narendra Modi       Rahul Gandhi\n",
      "\n",
      "Hindu                           Jobs\n",
      "Muslim…\n",
      "RT @geetv79: \"Congress Couldn't Finish Work In 70 Years, How Can I In 5?\": PM In Bihar\n",
      " \n",
      "Modi must know that by going backwards🔙 work will…\n",
      "RT @oneindiaHindi: बिहार में पीएम नरेंद्र मोदी की रैली से पहले राजेडी नेता @yadavtejashwi ने ट्वीट कर पुराने वादे याद दिलाए हैं। इसके साथ…\n",
      "RT @Joydas: Narendra Modi has said Hindu cannot be a Terrorist. You don’t have to go back to Nathuram Godse to prove him wrong. Here is one…\n",
      "RT @thewirehindi: क्या प्रधानमंत्री हीन भावना से ग्रस्त एक डरे हुए व्यक्ति हैं?\n",
      "\n",
      "https://t.co/1oFZQmOczD\n",
      "\n",
      "#NarendraModi #India #Politics #न…\n",
      "RT @rishibagree: On the one hand, you have 100+ C grade filmmakers anti-Modi.\n",
      "\n",
      "On the other, just one Rajnikanth is enough!!!\n",
      "\n",
      "https://t.co…\n"
     ]
    }
   ],
   "source": [
    "import re \n",
    "import numpy as np\n",
    "import tweepy \n",
    "from tweepy import OAuthHandler \n",
    "from textblob import TextBlob\n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import nltk\n",
    "\n",
    "\n",
    "class TwitterClient(object): \n",
    "\n",
    "    def __init__(self): \n",
    "        #Intructions to find your Keys and tokens \n",
    "        # apps.twitter.com ---> create an account or log in ----> Get keys and tokens from application settings.\n",
    "        # keys and tokens from the Twitter Console \n",
    "        #API requests on your own account's behalf. Do not share your access token secret with anyone.\n",
    "        \n",
    "        consumer_key = \"FHFptYK0XrSGGsSrcd5DcCncK\"\n",
    "        consumer_secret = \"BrjqHKBoX1GJWJxGoxXCbZY2wnZonjMXwUhWA0r9QZr1YnYr7I\"\n",
    "        access_token = \"935589591364653057-vMt0hV3cVH8XcRzgEuH3DcqX2b2kTbo\"\n",
    "        access_token_secret = \"EGxGT5vO1sjKgIDpQmu00o5nEQR2TCFYXMPHKiZaqCnkX\"\n",
    "  \n",
    "        # We try to attempt authentication \n",
    "        try: \n",
    "            # First we create OAuthHandler object \n",
    "            self.auth = OAuthHandler(consumer_key, consumer_secret) \n",
    "            # setting access token and secret \n",
    "            self.auth.set_access_token(access_token, access_token_secret) \n",
    "            # creating tweepy API object to fetch tweets \n",
    "            self.api = tweepy.API(self.auth) \n",
    "        except: \n",
    "            print(\"Error: Authentication Failed\") \n",
    " \n",
    "\n",
    "    def plain_tweet(self, tweet): \n",
    "        ''' \n",
    "        Utility function to clean tweet text by removing links, special characters \n",
    "        using simple regex statements. \n",
    "        '''\n",
    "        return ' '.join(re.sub(\"(@[A-Za-z0-9]+)|([^0-9A-Za-z \\t])|(\\w+:\\/\\/\\S+)\", \" \", tweet).split()) \n",
    "  \n",
    "    def fetch_tweet_sentiment(self, tweet): \n",
    "        ''' \n",
    "        Utility function to classify sentiment of passed tweet \n",
    "        using textblob's sentiment method \n",
    "        '''\n",
    "        # create TextBlob object of passed tweet text \n",
    "        analysis = TextBlob(self.plain_tweet(tweet)) \n",
    "        # set sentiment \n",
    "        if analysis.sentiment.polarity > 0: \n",
    "            return 'positive'\n",
    "        else: \n",
    "            return 'negative'\n",
    "  \n",
    "    def extract_tweets(self, query, count = 10): \n",
    "        # empty list to store parsed tweets \n",
    "        tweets = [] \n",
    "  \n",
    "        try: \n",
    "            # call twitter api to fetch tweets \n",
    "            all_fetched_tweets = self.api.search(q = query, count = count) \n",
    "  \n",
    "            # parsing tweets one by one \n",
    "            for tweet in all_fetched_tweets: \n",
    "                # empty dictionary to store required params of a tweet \n",
    "                parsed_tweet = {} \n",
    "  \n",
    "                # saving text of tweet \n",
    "                parsed_tweet['text'] = tweet.text \n",
    "                # saving sentiment of tweet \n",
    "                parsed_tweet['sentiment'] = self.fetch_tweet_sentiment(tweet.text) \n",
    "  \n",
    "                # appending parsed tweet to tweets list \n",
    "                if tweet.retweet_count > 0: \n",
    "                    # if tweet has retweets, ensure that it is appended only once \n",
    "                    if parsed_tweet not in tweets: \n",
    "                        tweets.append(parsed_tweet) \n",
    "                else: \n",
    "                    tweets.append(parsed_tweet) \n",
    "  \n",
    "            # return parsed tweets \n",
    "            return tweets \n",
    "  \n",
    "        except tweepy.TweepError as e: \n",
    "            # print error (if any) \n",
    "            print(\"Error : \" + str(e)) \n",
    "\n",
    "\n",
    "def main(): \n",
    "    # Enter the name in query (calling function) for sentiment analysis.\n",
    "    # For eg : Warren Buffet\n",
    "    \n",
    "    # creating object of TwitterClient Class \n",
    "    api = TwitterClient() \n",
    "    # calling function to get tweets \n",
    "    tweets = api.extract_tweets(query = 'Narendra Modi', count = 230) \n",
    "  \n",
    "    # picking positive tweets from tweets \n",
    "    ptweets = [tweet for tweet in tweets if tweet['sentiment'] == 'positive'] \n",
    "    # percentage of positive tweets \n",
    "    print(\"Percentage of positive tweets : {} %\".format(100*len(ptweets)/len(tweets))) \n",
    "    # picking negative tweets from tweets \n",
    "    ntweets = [tweet for tweet in tweets if tweet['sentiment'] == 'negative'] \n",
    "    # percentage of negative tweets \n",
    "    print(\"Percentage of negative tweets : {} %\".format(100*len(ntweets)/len(tweets)))\n",
    " \n",
    " \n",
    "  \n",
    "    # print first 5 positive tweets \n",
    "    print(\"\\n\\nPositive tweets:\") \n",
    "    for tweet in ptweets[:10]: \n",
    "        print(tweet['text']) \n",
    "  \n",
    "    # print first 5 negative tweets \n",
    "    print(\"\\n\\nNegative tweets:\") \n",
    "    for tweet in ntweets[:10]: \n",
    "        print(tweet['text']) \n",
    "  \n",
    "    \n",
    "if __name__ == \"__main__\":\n",
    "    main()\n",
    "\n",
    "    \n",
    "## References\n",
    "## https://www.ijcaonline.org/research/volume125/number3/dandrea-2015-ijca-905866.pdf\n",
    "## https://textblob.readthedocs.io/en/dev/quickstart.html#sentiment-analysis\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
